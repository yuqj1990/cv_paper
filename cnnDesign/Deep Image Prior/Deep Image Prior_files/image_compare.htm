<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0050)https://dmitryulyanov.github.io/image_compare.html -->
<HTML lang=en><HEAD><META content="IE=7.0000" http-equiv="X-UA-Compatible">
<TITLE>Comparison</TITLE>
<META content="text/html; charset=UTF-8" http-equiv=Content-Type>
<META name=viewport content="width=device-width, initial-scale=1.0"><!-- CSS  --><LINK 
rel=stylesheet href="image_compare_files/materialize.min.css"><LINK 
rel=stylesheet type=text/css href="image_compare_files/style_clean.css" 
media=screen,projection><LINK rel=stylesheet type=text/css 
href="image_compare_files/css.css">
<META name=GENERATOR content="MSHTML 11.00.9600.18838"></HEAD>
<BODY>
<DIV id=maindiv class="container main-body">
<DIV class="row center">
<DIV class="input-field col col-centered mmw"><SELECT onchange=change_task() 
id=tasks></SELECT> <LABEL class=select_label>Problem</LABEL> </DIV>
<DIV class="input-field col col-centered mmw"><SELECT onchange=change_dataset() 
id=datasets></SELECT> <LABEL class=select_label>Dataset</LABEL> </DIV>
<DIV class="input-field col col-centered mmw"><SELECT onchange=change_variant() 
id=variants></SELECT> <LABEL class=select_label>Scale/Sigma</LABEL> </DIV>
<DIV class="input-field col col-centered mmw"><SELECT onchange=change_variant() 
id=imgs></SELECT> <LABEL class=select_label>Select Image</LABEL> </DIV></DIV>
<DIV id=methods_table class="row row-centered center" 
style="MARGIN-BOTTOM: 15px"></DIV>
<DIV class="row center">
<DIV class=center><IMG onresize=sendHeight() 
onerror="this.src='/assets/deep-image-prior/NA.jpg'" id=img-bicubic 
class="responsive-img demo-img shadow" name=demo-img 
src="image_compare_files/OBB050F4.htm"> 
<DIV id=img-caption class=subtitle></DIV></DIV></DIV></DIV><!--  Scripts-->
<SCRIPT type=text/javascript 
src="image_compare_files/jquery-3.2.1.min.js"></SCRIPT>

<SCRIPT src="image_compare_files/materialize.min.js"></SCRIPT>

<SCRIPT src="image_compare_files/zepto.min.js"></SCRIPT>

<SCRIPT>
        var task_dict = { 
                          SR: {
                                datasets: {
                                    Set5: ['butterfly', 'baby', 'bird', 'head', 'woman'],
                                    Set14: ["zebra", "flowers", "baboon", "barbara", "bridge", "coastguard", "comic", "face",  "foreman", "lenna", "man", "monarch", "pepper", "ppt3"]
                                },
                                methods: {
                                    
                                    x4: [
                                      {id:"1 GT",       text:"<span class=\"method-tagg gt\">1. Ground Truth</span>"},
                                      {id:"2 bicubic",  text:"<span class=\"method-tagg notlearned\">2. Bicubic</span>"},
                                      {id:"3 glasner",   text:"<span class=\"method-tagg notlearned\">3. Glasner et al.</span>"},
                                      {id:"4 no_prior",  text:"<span class=\"method-tagg notlearned\">4. No prior</span>"},
                                      {id:"5 tv_prior",  text:"<span class=\"method-tagg notlearned\">5. TV prior</span>"},
                                      {id:"6 deep_prior",  text:"<span class=\"method-tagg notlearned ours\">6. Deep prior (ours)</span>"},
                                      {id:"7 LapSRN",   text:"<span class=\"method-tagg learned tooltipped\" data-position=\"right\" data-delay=\"00\" data-tooltip=\"Learned\">7. LapSRN<sup>*</sup></span>"},
                                      {id:"8 SRResNet-MSE",   text:"<span class=\"method-tagg learned tooltipped\" data-position=\"right\" data-delay=\"00\" data-tooltip=\"Learned\">8. SRResNet-MSE<sup>*</sup></span>"},
                                      ],
                                    x8: [
                                      {id:"1 GT",       text:"<span class=\"method-tagg gt\">1. Ground Truth</span>"},
                                      {id:"2 bicubic",  text:"<span class=\"method-tagg notlearned\">2. Bicubic</span>"},
                                      {id:"3 SelfExSR",   text:"<span class=\"method-tagg notlearned\">3. SelfExSR</span>"},
                                      {id:"4 no_prior",  text:"<span class=\"method-tagg notlearned\">4. No prior</span>"},
                                      {id:"5 tv_prior",  text:"<span class=\"method-tagg notlearned\">5. TV prior</span>"},
                                      
                                      {id:"6 deep_prior_003",   text:"<span class=\"method-tagg learned tooltipped\" data-position=\"bottom\" data-delay=\"00\" data-tooltip=\"Noise regularization=0.03\">6. Deep prior<sup>1</sup></span>"},
                                      
                                      {id:"7 deep_prior_005",   text:"<span class=\"method-tagg notlearned tooltipped ours\" data-position=\"bottom\" data-delay=\"00\" data-tooltip=\"Noise regularization=0.05\">7. Deep prior<sup>2</sup></span>"},
                                      
                                      {id:"8 LapSRN",   text:"<span class=\"method-tagg learned tooltipped\" data-position=\"right\" data-delay=\"00\" data-tooltip=\"Learned\">8. LapSRN<sup>*</sup></span>"},
                                      ]
                                },
                                variants: ['x4', 'x8']
                              },
                          Denoising: {
                                datasets: {
                                  Color: ["F16", "hill", "peppers", "kodim02", "kodim12", "baboon", "lena", "kodim01", "kodim03"],
                                },
                                methods: {
                                  '25':  [
                                    {id:"1 GT",         text:"1. Original"},
                                    {id:"2 noisy",      text:"2. Corrupted"},
                                    {id:"3 bm3d",       text:"3. BM3D"},
                                    {id:"4 nlm",        text:"4. NLM"},
                                    {id:"5 deep_prior", text:"<span class=\"method-tagg notlearned ours\">5. Deep prior (ours)</span>"}
                                  ],
                                  '50': [
                                    {id:"1 GT",         text:"1. Original"},
                                    {id:"2 noisy",      text:"2. Corrupted"},
                                    {id:"3 bm3d",       text:"3. BM3D"},
                                    {id:"4 nlm",        text:"4. NLM"},
                                    {id:"5 deep_prior", text:"<span class=\"method-tagg notlearned ours\">5. Deep prior (ours)</span>"}
                                  ]
                                },
                                variants: ['25', '50']
                          },
                          Reconstruction: {
                                  datasets: {
                                    Gray: ["barbara", "boat", "Cameraman256", "couple", "fingerprint", "hill", "house", "Lena512", "man", "montage", "peppers256"],
                                  },
                                methods: {
                                    '50p': [
                                        {id:"1 GT",         text:"1. Original"},
                                        {id:"2 masked",     text:"2. Corrupted"},
                                        {id:"3 papyan",     text:"3. Papyan et al."},
                                        {id:"4 deep_prior", text:"<span class=\"method-tagg notlearned ours\">4. Deep prior (ours)</span>"}
                                    ]
                                },
                                variants: ['50p']
                          }
                        };

      function fill_methods_select(methods) {
        $("[id='methods_table']").empty();
        var mt = document.getElementById("methods_table");
        for (i = 0; i < methods.length; i++) { 
            var td=document.createElement("div");
            td.id=methods[i].id;
            td.innerHTML = methods[i].text;
            td.className="col-centered method-tag col";

            mt.appendChild(td);

            $("[id='" + methods[i].id + "']").attr("onmouseover","change_method(this.id)");
        }
      }

      function fill_variants_select(variants) {
        $("[id='variants']").empty();
        var sel = document.getElementById("variants");
        for (i = 0; i < variants.length; i++) { 
            var opt=document.createElement("option");
            opt.value = variants[i];
            opt.innerHTML = variants[i];
        
            sel.appendChild(opt);
        }
        
        sel.selectedIndex = 0;

        return variants[0];
      }

      function fill_imgs_select(imgs) {
        $("[id='imgs']").empty();
        var sel = document.getElementById("imgs");
        for (i = 0; i < imgs.length; i++) { 
            var opt=document.createElement("option");
            opt.value = imgs[i];
            opt.innerHTML = imgs[i];
            
            sel.appendChild(opt);
        }
        sel.selectedIndex = 0;

        return imgs[0];
      }

      function fill_datasets_select(datasets) {
        $("[id='datasets']").empty();
        var sel = document.getElementById("datasets");
        for (i = 0; i < datasets.length; i++) { 
            var opt=document.createElement("option");
            opt.value = datasets[i];
            opt.innerHTML = datasets[i];
            
            sel.appendChild(opt);
        }
        sel.selectedIndex = 0;

        return datasets[0];
      }

      function fill_tasks_select(tasks) {
        $("[id='tasks']").empty();
        var sel = document.getElementById("tasks");
        for (i = 0; i < tasks.length; i++) { 
            var opt=document.createElement("option");
            opt.value = tasks[i];
            opt.innerHTML = tasks[i];
            
            sel.appendChild(opt);
        }
        sel.selectedIndex = 0;

        return tasks[0];
      }

      function change_task() {
        var x = document.getElementById("tasks");
        var i = x.selectedIndex;
        var selected_task = x.options[i].value;

        fill_datasets_select(Object.keys(task_dict[selected_task].datasets));
        change_dataset();
      }

      function change_dataset() {
        var x = document.getElementById("tasks");
        var i = x.selectedIndex;
        var selected_task = x.options[i].value;

        var x = document.getElementById("datasets");
        var i = x.selectedIndex;
        var selected_dataset = x.options[i].value;

        var selected_variant = fill_variants_select(task_dict[selected_task].variants);
        var selected_img     = fill_imgs_select(task_dict[selected_task].datasets[selected_dataset]);
        var selected_method = fill_methods_select(task_dict[selected_task].methods[selected_variant]);

        change_method('1 GT');
        $('select').material_select();
        $('.tooltipped').tooltip({delay: 0});
        // sendHeight();
        // MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
      }


    var idx_to_key = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '+', 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', '\'', '\\', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/']

    function change_variant() {
        var x = document.getElementById("tasks");
        var i = x.selectedIndex;
        var selected_task = x.options[i].value;

        x = document.getElementById("datasets");
        i = x.selectedIndex;
        var selected_dataset = x.options[i].value;

        x = document.getElementById("variants");
        i = x.selectedIndex;
        var selected_variant = x.options[i].value;


        // var selected_img     = fill_imgs_select(task_dict[selected_task].datasets[selected_dataset]);
        var selected_method = fill_methods_select(task_dict[selected_task].methods[selected_variant]);



        var img = document.getElementsByName("demo-img")[0];
        var method = img.id.split("-")[1];
        change_method(method);
        $('.tooltipped').tooltip({delay: 0});
    }

    function change_method(method_) {
        var s = method_.split(' ');
        var method_idx = s[0];
        var method = s[1];

        var x = document.getElementById("tasks");
        var i = x.selectedIndex;
        var task = x.options[i].value;

        x = document.getElementById("datasets");
        i = x.selectedIndex;
        var dataset = x.options[i].value;

        x = document.getElementById("variants");
        i = x.selectedIndex;
        var variant = x.options[i].value;

        x = document.getElementById("imgs");
        i = x.selectedIndex;
        var name = x.options[i].value;

        var img = document.getElementsByName("demo-img")[0];
        var filename = name + "_" + method;
        img.src = "/assets/deep-image-prior/" + task + "/" + dataset + "/" + variant + "/" + filename + ".png";
        img.id = "img-" + method_;

        // Caption
        var caption = document.getElementById("img-caption");
        

        var method_div = document.getElementById(method_);
        caption.innerHTML =  method_div.innerHTML;
  
    }


    document.onkeypress = function checkKeycode(event) {
        var keycode, keyChar;

        if(!event) var event = window.event;
        if (event.keyCode) keycode = event.keyCode;
        else if(event.which) keycode = event.which;
        key = String.fromCharCode(keycode);

        key_idx = idx_to_key.indexOf(key);

        table = document.getElementById("methods_table");
        if (key_idx < table.children.length) {
          var method = table.children[key_idx].id;
          change_method(method);
        }




    }
    sendHeight = function(){
      height = $('div').height();
      window.parent.postMessage({"height": height}, "*");
    }
    $(document).ready(function(){
        $('.materialboxed').materialbox();

        var selected_task    = fill_tasks_select(Object.keys(task_dict));
        change_task(selected_task);
        
        $('select').material_select();
      
        $('img').on('load', function(){
          sendHeight();
        });
    }); // end of document ready


  </SCRIPT>
<!-- Latest compiled and minified JavaScript --></BODY></HTML>
